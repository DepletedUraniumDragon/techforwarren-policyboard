// tslint:disable
/**
 * Consumer Complaint Database API
 * The API for searching the Consumer Complaint Database
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * An Elasticsearch aggregation
 * @export
 * @interface Aggregation
 */
export interface Aggregation {
    /**
     * The total number of complaints covered in this aggregation
     * @type {number}
     * @memberof Aggregation
     */
    docCount?: number;
    /**
     * 
     * @type {AggregationField}
     * @memberof Aggregation
     */
    field?: AggregationField;
}
/**
 * The name of the ` being aggregated
 * @export
 * @interface AggregationField
 */
export interface AggregationField {
    /**
     * 
     * @type {Array<Bucket>}
     * @memberof AggregationField
     */
    buckets?: Array<Bucket>;
    /**
     * The number of possible errors that occurred when searching the shards
     * @type {number}
     * @memberof AggregationField
     */
    docCountErrorUpperBound?: number;
    /**
     * The number of complaints that were not included in this aggregation.
     * @type {number}
     * @memberof AggregationField
     */
    sumOtherDocCount?: number;
}
/**
 * 
 * @export
 * @interface Bucket
 */
export interface Bucket {
    /**
     * The number of complaints that match this key
     * @type {number}
     * @memberof Bucket
     */
    docCount?: number;
    /**
     * 
     * @type {string}
     * @memberof Bucket
     */
    key?: string;
}
/**
 * 
 * @export
 * @interface Complaint
 */
export interface Complaint {
    /**
     * The complaint is about this company
     * @type {string}
     * @memberof Complaint
     */
    company?: string;
    /**
     * The company\'s optional, public-facing response to a consumer\'s complaint
     * @type {string}
     * @memberof Complaint
     */
    companyPublicResponse?: string;
    /**
     * The response from the company about this complaint
     * @type {string}
     * @memberof Complaint
     */
    companyResponse?: string;
    /**
     * The unique identification number for a complaint
     * @type {number}
     * @memberof Complaint
     */
    complaintId?: number;
    /**
     * A description of the complaint provided by the consumer
     * @type {string}
     * @memberof Complaint
     */
    complaintWhatHappened?: string;
    /**
     * dentifies whether the consumer opted in to publish their complaint narrative
     * @type {string}
     * @memberof Complaint
     */
    consumerConsentProvided?: string;
    /**
     * Whether the consumer disputed the companyâ€™s response
     * @type {string}
     * @memberof Complaint
     */
    consumerDisputed?: string;
    /**
     * The date the CFPB received the complaint
     * @type {string}
     * @memberof Complaint
     */
    dateReceived?: string;
    /**
     * The date the CFPB sent the complaint to the company
     * @type {string}
     * @memberof Complaint
     */
    dateSentToCompany?: string;
    /**
     * Indicates this complaint has a narrative
     * @type {boolean}
     * @memberof Complaint
     */
    hasNarrative?: boolean;
    /**
     * The issue the consumer identified in the complaint
     * @type {string}
     * @memberof Complaint
     */
    issue?: string;
    /**
     * The type of product the consumer identified in the complaint
     * @type {string}
     * @memberof Complaint
     */
    product?: string;
    /**
     * The state of the mailing address provided by the consumer
     * @type {string}
     * @memberof Complaint
     */
    state?: string;
    /**
     * The sub-issue the consumer identified in the complaint
     * @type {string}
     * @memberof Complaint
     */
    subIssue?: string;
    /**
     * The type of sub-product the consumer identified in the complaint
     * @type {string}
     * @memberof Complaint
     */
    subProduct?: string;
    /**
     * How the complaint was submitted to the CFPB
     * @type {string}
     * @memberof Complaint
     */
    submittedVia?: string;
    /**
     * Data that supports easier searching and sorting of complaints
     * @type {string}
     * @memberof Complaint
     */
    tags?: string;
    /**
     * Indicates whether the company gave a timely response or not
     * @type {string}
     * @memberof Complaint
     */
    timely?: string;
    /**
     * The mailing ZIP code provided by the consumer
     * @type {string}
     * @memberof Complaint
     */
    zipCode?: string;
}
/**
 * A single Elasticsearch result
 * @export
 * @interface Hit
 */
export interface Hit {
    /**
     * 
     * @type {Complaint}
     * @memberof Hit
     */
    source?: Complaint;
}
/**
 * A set of complaints that matched the query
 * @export
 * @interface Hits
 */
export interface Hits {
    /**
     * 
     * @type {Array<Hit>}
     * @memberof Hits
     */
    hits?: Array<Hit>;
    /**
     * The highest score in the results
     * @type {number}
     * @memberof Hits
     */
    maxScore?: number;
    /**
     * The totol number of complaints that matched the query
     * @type {number}
     * @memberof Hits
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface Meta
 */
export interface Meta {
    /**
     * Indicates there has been an issue with the most recent data load
     * @type {boolean}
     * @memberof Meta
     */
    hasDataIssue?: boolean;
    /**
     * Indicates the most recent data is over 5 business days old
     * @type {boolean}
     * @memberof Meta
     */
    isDataStale?: boolean;
    /**
     * Indicates the most recent narratives are over 5 busines days old
     * @type {boolean}
     * @memberof Meta
     */
    isNarrativeStale?: boolean;
    /**
     * The timestamp of the most recently indexed complaint
     * @type {string}
     * @memberof Meta
     */
    lastIndexed?: string;
    /**
     * The timestamp of the most recent complaint
     * @type {string}
     * @memberof Meta
     */
    lastUpdated?: string;
    /**
     * The open source license under which the API operates
     * @type {string}
     * @memberof Meta
     */
    license?: string;
    /**
     * The total number of complaints currently indexed
     * @type {number}
     * @memberof Meta
     */
    totalRecordCount?: number;
}
/**
 * 
 * @export
 * @interface MultiLevelAggregation
 */
export interface MultiLevelAggregation {
    /**
     * The total number of complaints covered in this aggregation
     * @type {number}
     * @memberof MultiLevelAggregation
     */
    docCount?: number;
    /**
     * 
     * @type {MultiLevelAggregationField}
     * @memberof MultiLevelAggregation
     */
    field?: MultiLevelAggregationField;
}
/**
 * The name of the field being aggregated
 * @export
 * @interface MultiLevelAggregationField
 */
export interface MultiLevelAggregationField {
    /**
     * 
     * @type {Array<MultiLevelBucket>}
     * @memberof MultiLevelAggregationField
     */
    buckets?: Array<MultiLevelBucket>;
    /**
     * The number of possible errors that occurred when searching the shards
     * @type {number}
     * @memberof MultiLevelAggregationField
     */
    docCountErrorUpperBound?: number;
    /**
     * The number of complaints that were not included in this aggregation.
     * @type {number}
     * @memberof MultiLevelAggregationField
     */
    sumOtherDocCount?: number;
}
/**
 * 
 * @export
 * @interface MultiLevelBucket
 */
export interface MultiLevelBucket {
    /**
     * The number of complaints that match this key
     * @type {number}
     * @memberof MultiLevelBucket
     */
    docCount?: number;
    /**
     * 
     * @type {MultiLevelBucketFieldRaw}
     * @memberof MultiLevelBucket
     */
    fieldRaw?: MultiLevelBucketFieldRaw;
    /**
     * 
     * @type {string}
     * @memberof MultiLevelBucket
     */
    key?: string;
}
/**
 * The next level of aggregations
 * @export
 * @interface MultiLevelBucketFieldRaw
 */
export interface MultiLevelBucketFieldRaw {
    /**
     * 
     * @type {Array<Aggregation>}
     * @memberof MultiLevelBucketFieldRaw
     */
    buckets?: Array<Aggregation>;
}
/**
 * 
 * @export
 * @interface SearchResult
 */
export interface SearchResult {
    /**
     * 
     * @type {Meta}
     * @memberof SearchResult
     */
    meta?: Meta;
    /**
     * 
     * @type {SearchResultAggregations}
     * @memberof SearchResult
     */
    aggregations?: SearchResultAggregations;
    /**
     * 
     * @type {Hits}
     * @memberof SearchResult
     */
    hits?: Hits;
}
/**
 * 
 * @export
 * @interface SearchResultAggregations
 */
export interface SearchResultAggregations {
    /**
     * 
     * @type {Aggregation}
     * @memberof SearchResultAggregations
     */
    companyPublicResponse?: Aggregation;
    /**
     * 
     * @type {Aggregation}
     * @memberof SearchResultAggregations
     */
    companyResponse?: Aggregation;
    /**
     * 
     * @type {Aggregation}
     * @memberof SearchResultAggregations
     */
    consumerConsentProvided?: Aggregation;
    /**
     * 
     * @type {Aggregation}
     * @memberof SearchResultAggregations
     */
    consumerDisputed?: Aggregation;
    /**
     * 
     * @type {Aggregation}
     * @memberof SearchResultAggregations
     */
    hasNarrative?: Aggregation;
    /**
     * 
     * @type {MultiLevelAggregation}
     * @memberof SearchResultAggregations
     */
    issue?: MultiLevelAggregation;
    /**
     * 
     * @type {MultiLevelAggregation}
     * @memberof SearchResultAggregations
     */
    product?: MultiLevelAggregation;
    /**
     * 
     * @type {Aggregation}
     * @memberof SearchResultAggregations
     */
    state?: Aggregation;
    /**
     * 
     * @type {Aggregation}
     * @memberof SearchResultAggregations
     */
    submittedVia?: Aggregation;
    /**
     * 
     * @type {Aggregation}
     * @memberof SearchResultAggregations
     */
    tags?: Aggregation;
    /**
     * 
     * @type {Aggregation}
     * @memberof SearchResultAggregations
     */
    timely?: Aggregation;
    /**
     * 
     * @type {Aggregation}
     * @memberof SearchResultAggregations
     */
    zipCode?: Aggregation;
}

/**
 * ComplaintsApi - axios parameter creator
 * @export
 */
export const ComplaintsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get complaint details for a specific ID
         * @summary Find comsumer complaint by ID
         * @param {number} complaintId ID of the complaint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complaintIdGet(complaintId: number, options: any = {}): RequestArgs {
            // verify required parameter 'complaintId' is not null or undefined
            if (complaintId === null || complaintId === undefined) {
                throw new RequiredError('complaintId','Required parameter complaintId was null or undefined when calling complaintIdGet.');
            }
            const localVarPath = `/{complaintId}`
                .replace(`{${"complaintId"}}`, encodeURIComponent(String(complaintId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search the contents of the consumer complaint database
         * @summary Search consumer complaints
         * @param {string} [searchTerm] Return results containing specific term
         * @param {'complaint_what_happened' | 'company_public_response' | 'all'} [field] Search by particular field
         * @param {number} [frm] Return results starting from a specific index, only if format parameter is not specified, ignore otherwise
         * @param {number} [size] Limit the size of the results
         * @param {'relevance_desc' | 'relevance_asc' | 'created_date_desc' | 'created_date_asc'} [sort] Return results sort in a particular order
         * @param {'json' | 'csv'} [format] Format to be returned, if this parameter is not specified, frm/size parameters can be used properly, but if a format is specified for exporting, frm/size will be ignored
         * @param {boolean} [noAggs] Include aggregations in result or not, True means no aggregations will be included, False means aggregations will be included.
         * @param {boolean} [noHighlight] Include highlight of search term in result or not, True means no highlighting will be included, False means highlighting will be included.
         * @param {Array<string>} [company] Filter the results to only return these companies
         * @param {Array<string>} [companyPublicResponse] Filter the results to only return these types of public response by the company
         * @param {string} [companyReceivedMax] Return results with date &lt; company_received_max (i.e. 2017-03-04)
         * @param {string} [companyReceivedMin] Return results with date &gt;&#x3D; company_received_min (i.e. 2017-03-04)
         * @param {Array<string>} [companyResponse] Filter the results to only return these types of response by the company
         * @param {Array<string>} [consumerConsentProvided] Filter the results to only return these types of consent consumer provided
         * @param {Array<string>} [consumerDisputed] Filter the results to only return the specified state of consumer disputed, i.e. yes, no
         * @param {string} [dateReceivedMax] Return results with date &lt; date_received_max (i.e. 2017-03-04)
         * @param {string} [dateReceivedMin] Return results with date &gt;&#x3D; date_received_min (i.e. 2017-03-04)
         * @param {Array<string>} [hasNarrative] Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no
         * @param {Array<string>} [issue] Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by \&#39;•\&#39;, Getting a Loan•Can\&#39;t qualify for a loan
         * @param {Array<string>} [product] Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by \&#39;•\&#39;, Mortgage•FHA mortgage
         * @param {Array<string>} [state] Filter the results to only return these states (use abbreviation, i.e. CA, VA)
         * @param {Array<string>} [submittedVia] Filter the results to only return these types of way consumers submitted their complaints
         * @param {Array<string>} [tag] Filter the results to only return these types of tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(searchTerm?: string, field?: 'complaint_what_happened' | 'company_public_response' | 'all', frm?: number, size?: number, sort?: 'relevance_desc' | 'relevance_asc' | 'created_date_desc' | 'created_date_asc', format?: 'json' | 'csv', noAggs?: boolean, noHighlight?: boolean, company?: Array<string>, companyPublicResponse?: Array<string>, companyReceivedMax?: string, companyReceivedMin?: string, companyResponse?: Array<string>, consumerConsentProvided?: Array<string>, consumerDisputed?: Array<string>, dateReceivedMax?: string, dateReceivedMin?: string, hasNarrative?: Array<string>, issue?: Array<string>, product?: Array<string>, state?: Array<string>, submittedVia?: Array<string>, tag?: Array<string>, options: any = {}): RequestArgs {
            const localVarPath = `/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchTerm !== undefined) {
                localVarQueryParameter['search_term'] = searchTerm;
            }

            if (field !== undefined) {
                localVarQueryParameter['field'] = field;
            }

            if (frm !== undefined) {
                localVarQueryParameter['frm'] = frm;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (noAggs !== undefined) {
                localVarQueryParameter['no_aggs'] = noAggs;
            }

            if (noHighlight !== undefined) {
                localVarQueryParameter['no_highlight'] = noHighlight;
            }

            if (company) {
                localVarQueryParameter['company'] = company;
            }

            if (companyPublicResponse) {
                localVarQueryParameter['company_public_response'] = companyPublicResponse;
            }

            if (companyReceivedMax !== undefined) {
                localVarQueryParameter['company_received_max'] = (companyReceivedMax as any instanceof Date) ?
                    (companyReceivedMax as any).toISOString().substr(0,10) :
                    companyReceivedMax;
            }

            if (companyReceivedMin !== undefined) {
                localVarQueryParameter['company_received_min'] = (companyReceivedMin as any instanceof Date) ?
                    (companyReceivedMin as any).toISOString().substr(0,10) :
                    companyReceivedMin;
            }

            if (companyResponse) {
                localVarQueryParameter['company_response'] = companyResponse;
            }

            if (consumerConsentProvided) {
                localVarQueryParameter['consumer_consent_provided'] = consumerConsentProvided;
            }

            if (consumerDisputed) {
                localVarQueryParameter['consumer_disputed'] = consumerDisputed;
            }

            if (dateReceivedMax !== undefined) {
                localVarQueryParameter['date_received_max'] = (dateReceivedMax as any instanceof Date) ?
                    (dateReceivedMax as any).toISOString().substr(0,10) :
                    dateReceivedMax;
            }

            if (dateReceivedMin !== undefined) {
                localVarQueryParameter['date_received_min'] = (dateReceivedMin as any instanceof Date) ?
                    (dateReceivedMin as any).toISOString().substr(0,10) :
                    dateReceivedMin;
            }

            if (hasNarrative) {
                localVarQueryParameter['has_narrative'] = hasNarrative;
            }

            if (issue) {
                localVarQueryParameter['issue'] = issue;
            }

            if (product) {
                localVarQueryParameter['product'] = product;
            }

            if (state) {
                localVarQueryParameter['state'] = state;
            }

            if (submittedVia) {
                localVarQueryParameter['submitted_via'] = submittedVia;
            }

            if (tag) {
                localVarQueryParameter['tag'] = tag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ComplaintsApi - functional programming interface
 * @export
 */
export const ComplaintsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get complaint details for a specific ID
         * @summary Find comsumer complaint by ID
         * @param {number} complaintId ID of the complaint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complaintIdGet(complaintId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Complaint> {
            const localVarAxiosArgs = ComplaintsApiAxiosParamCreator(configuration).complaintIdGet(complaintId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Search the contents of the consumer complaint database
         * @summary Search consumer complaints
         * @param {string} [searchTerm] Return results containing specific term
         * @param {'complaint_what_happened' | 'company_public_response' | 'all'} [field] Search by particular field
         * @param {number} [frm] Return results starting from a specific index, only if format parameter is not specified, ignore otherwise
         * @param {number} [size] Limit the size of the results
         * @param {'relevance_desc' | 'relevance_asc' | 'created_date_desc' | 'created_date_asc'} [sort] Return results sort in a particular order
         * @param {'json' | 'csv'} [format] Format to be returned, if this parameter is not specified, frm/size parameters can be used properly, but if a format is specified for exporting, frm/size will be ignored
         * @param {boolean} [noAggs] Include aggregations in result or not, True means no aggregations will be included, False means aggregations will be included.
         * @param {boolean} [noHighlight] Include highlight of search term in result or not, True means no highlighting will be included, False means highlighting will be included.
         * @param {Array<string>} [company] Filter the results to only return these companies
         * @param {Array<string>} [companyPublicResponse] Filter the results to only return these types of public response by the company
         * @param {string} [companyReceivedMax] Return results with date &lt; company_received_max (i.e. 2017-03-04)
         * @param {string} [companyReceivedMin] Return results with date &gt;&#x3D; company_received_min (i.e. 2017-03-04)
         * @param {Array<string>} [companyResponse] Filter the results to only return these types of response by the company
         * @param {Array<string>} [consumerConsentProvided] Filter the results to only return these types of consent consumer provided
         * @param {Array<string>} [consumerDisputed] Filter the results to only return the specified state of consumer disputed, i.e. yes, no
         * @param {string} [dateReceivedMax] Return results with date &lt; date_received_max (i.e. 2017-03-04)
         * @param {string} [dateReceivedMin] Return results with date &gt;&#x3D; date_received_min (i.e. 2017-03-04)
         * @param {Array<string>} [hasNarrative] Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no
         * @param {Array<string>} [issue] Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by \&#39;•\&#39;, Getting a Loan•Can\&#39;t qualify for a loan
         * @param {Array<string>} [product] Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by \&#39;•\&#39;, Mortgage•FHA mortgage
         * @param {Array<string>} [state] Filter the results to only return these states (use abbreviation, i.e. CA, VA)
         * @param {Array<string>} [submittedVia] Filter the results to only return these types of way consumers submitted their complaints
         * @param {Array<string>} [tag] Filter the results to only return these types of tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(searchTerm?: string, field?: 'complaint_what_happened' | 'company_public_response' | 'all', frm?: number, size?: number, sort?: 'relevance_desc' | 'relevance_asc' | 'created_date_desc' | 'created_date_asc', format?: 'json' | 'csv', noAggs?: boolean, noHighlight?: boolean, company?: Array<string>, companyPublicResponse?: Array<string>, companyReceivedMax?: string, companyReceivedMin?: string, companyResponse?: Array<string>, consumerConsentProvided?: Array<string>, consumerDisputed?: Array<string>, dateReceivedMax?: string, dateReceivedMin?: string, hasNarrative?: Array<string>, issue?: Array<string>, product?: Array<string>, state?: Array<string>, submittedVia?: Array<string>, tag?: Array<string>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResult> {
            const localVarAxiosArgs = ComplaintsApiAxiosParamCreator(configuration).rootGet(searchTerm, field, frm, size, sort, format, noAggs, noHighlight, company, companyPublicResponse, companyReceivedMax, companyReceivedMin, companyResponse, consumerConsentProvided, consumerDisputed, dateReceivedMax, dateReceivedMin, hasNarrative, issue, product, state, submittedVia, tag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ComplaintsApi - factory interface
 * @export
 */
export const ComplaintsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get complaint details for a specific ID
         * @summary Find comsumer complaint by ID
         * @param {number} complaintId ID of the complaint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        complaintIdGet(complaintId: number, options?: any) {
            return ComplaintsApiFp(configuration).complaintIdGet(complaintId, options)(axios, basePath);
        },
        /**
         * Search the contents of the consumer complaint database
         * @summary Search consumer complaints
         * @param {string} [searchTerm] Return results containing specific term
         * @param {'complaint_what_happened' | 'company_public_response' | 'all'} [field] Search by particular field
         * @param {number} [frm] Return results starting from a specific index, only if format parameter is not specified, ignore otherwise
         * @param {number} [size] Limit the size of the results
         * @param {'relevance_desc' | 'relevance_asc' | 'created_date_desc' | 'created_date_asc'} [sort] Return results sort in a particular order
         * @param {'json' | 'csv'} [format] Format to be returned, if this parameter is not specified, frm/size parameters can be used properly, but if a format is specified for exporting, frm/size will be ignored
         * @param {boolean} [noAggs] Include aggregations in result or not, True means no aggregations will be included, False means aggregations will be included.
         * @param {boolean} [noHighlight] Include highlight of search term in result or not, True means no highlighting will be included, False means highlighting will be included.
         * @param {Array<string>} [company] Filter the results to only return these companies
         * @param {Array<string>} [companyPublicResponse] Filter the results to only return these types of public response by the company
         * @param {string} [companyReceivedMax] Return results with date &lt; company_received_max (i.e. 2017-03-04)
         * @param {string} [companyReceivedMin] Return results with date &gt;&#x3D; company_received_min (i.e. 2017-03-04)
         * @param {Array<string>} [companyResponse] Filter the results to only return these types of response by the company
         * @param {Array<string>} [consumerConsentProvided] Filter the results to only return these types of consent consumer provided
         * @param {Array<string>} [consumerDisputed] Filter the results to only return the specified state of consumer disputed, i.e. yes, no
         * @param {string} [dateReceivedMax] Return results with date &lt; date_received_max (i.e. 2017-03-04)
         * @param {string} [dateReceivedMin] Return results with date &gt;&#x3D; date_received_min (i.e. 2017-03-04)
         * @param {Array<string>} [hasNarrative] Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no
         * @param {Array<string>} [issue] Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by \&#39;•\&#39;, Getting a Loan•Can\&#39;t qualify for a loan
         * @param {Array<string>} [product] Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by \&#39;•\&#39;, Mortgage•FHA mortgage
         * @param {Array<string>} [state] Filter the results to only return these states (use abbreviation, i.e. CA, VA)
         * @param {Array<string>} [submittedVia] Filter the results to only return these types of way consumers submitted their complaints
         * @param {Array<string>} [tag] Filter the results to only return these types of tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(searchTerm?: string, field?: 'complaint_what_happened' | 'company_public_response' | 'all', frm?: number, size?: number, sort?: 'relevance_desc' | 'relevance_asc' | 'created_date_desc' | 'created_date_asc', format?: 'json' | 'csv', noAggs?: boolean, noHighlight?: boolean, company?: Array<string>, companyPublicResponse?: Array<string>, companyReceivedMax?: string, companyReceivedMin?: string, companyResponse?: Array<string>, consumerConsentProvided?: Array<string>, consumerDisputed?: Array<string>, dateReceivedMax?: string, dateReceivedMin?: string, hasNarrative?: Array<string>, issue?: Array<string>, product?: Array<string>, state?: Array<string>, submittedVia?: Array<string>, tag?: Array<string>, options?: any) {
            return ComplaintsApiFp(configuration).rootGet(searchTerm, field, frm, size, sort, format, noAggs, noHighlight, company, companyPublicResponse, companyReceivedMax, companyReceivedMin, companyResponse, consumerConsentProvided, consumerDisputed, dateReceivedMax, dateReceivedMin, hasNarrative, issue, product, state, submittedVia, tag, options)(axios, basePath);
        },
    };
};

export interface GetParams {
    searchTerm?: string
    field?:'complaint_what_happened' | 'company_public_response' | 'all'
    frm?:number
    size?:number
    sort?:'relevance_desc' | 'relevance_asc' | 'created_date_desc' | 'created_date_asc'
    format?:'json'|'csv'
    noAggs?:boolean
    noHighlight?:boolean
    company?:string[]
    companyResponse?:string[]
    companyPublicResponse?:string[]
    consumerConsentProvided?:string[]
    consumerDisputed?:string[]
    companyReceivedMax?:string
    companyReceivedMin?:string
    dateReceivedMax?:string
    dateReceivedMin?:string
    hasNarrative?:string[]
    issue?:string[]
    product?:string[]
    state?:string[]
    submittedVia?:string[]
    tag?:string[]
    options?:any
}
/**
 * ComplaintsApi - object-oriented interface
 * @export
 * @class ComplaintsApi
 * @extends {BaseAPI}
 */
export class ComplaintsApi extends BaseAPI {
    /**
     * Get complaint details for a specific ID
     * @summary Find comsumer complaint by ID
     * @param {number} complaintId ID of the complaint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplaintsApi
     */
    public complaintIdGet(complaintId: number, options?: any) {
        return ComplaintsApiFp(this.configuration).complaintIdGet(complaintId, options)(this.axios, this.basePath);
    }

    /**
     * Search the contents of the consumer complaint database
     * @summary Search consumer complaints
     * @param {string} [searchTerm] Return results containing specific term
     * @param {'complaint_what_happened' | 'company_public_response' | 'all'} [field] Search by particular field
     * @param {number} [frm] Return results starting from a specific index, only if format parameter is not specified, ignore otherwise
     * @param {number} [size] Limit the size of the results
     * @param {'relevance_desc' | 'relevance_asc' | 'created_date_desc' | 'created_date_asc'} [sort] Return results sort in a particular order
     * @param {'json' | 'csv'} [format] Format to be returned, if this parameter is not specified, frm/size parameters can be used properly, but if a format is specified for exporting, frm/size will be ignored
     * @param {boolean} [noAggs] Include aggregations in result or not, True means no aggregations will be included, False means aggregations will be included.
     * @param {boolean} [noHighlight] Include highlight of search term in result or not, True means no highlighting will be included, False means highlighting will be included.
     * @param {Array<string>} [company] Filter the results to only return these companies
     * @param {Array<string>} [companyPublicResponse] Filter the results to only return these types of public response by the company
     * @param {string} [companyReceivedMax] Return results with date &lt; company_received_max (i.e. 2017-03-04)
     * @param {string} [companyReceivedMin] Return results with date &gt;&#x3D; company_received_min (i.e. 2017-03-04)
     * @param {Array<string>} [companyResponse] Filter the results to only return these types of response by the company
     * @param {Array<string>} [consumerConsentProvided] Filter the results to only return these types of consent consumer provided
     * @param {Array<string>} [consumerDisputed] Filter the results to only return the specified state of consumer disputed, i.e. yes, no
     * @param {string} [dateReceivedMax] Return results with date &lt; date_received_max (i.e. 2017-03-04)
     * @param {string} [dateReceivedMin] Return results with date &gt;&#x3D; date_received_min (i.e. 2017-03-04)
     * @param {Array<string>} [hasNarrative] Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no
     * @param {Array<string>} [issue] Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by \&#39;•\&#39;, Getting a Loan•Can\&#39;t qualify for a loan
     * @param {Array<string>} [product] Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by \&#39;•\&#39;, Mortgage•FHA mortgage
     * @param {Array<string>} [state] Filter the results to only return these states (use abbreviation, i.e. CA, VA)
     * @param {Array<string>} [submittedVia] Filter the results to only return these types of way consumers submitted their complaints
     * @param {Array<string>} [tag] Filter the results to only return these types of tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplaintsApi
     */
    public rootGet(searchTerm?: string, field?: 'complaint_what_happened' | 'company_public_response' | 'all', frm?: number, size?: number, sort?: 'relevance_desc' | 'relevance_asc' | 'created_date_desc' | 'created_date_asc', format?: 'json' | 'csv', noAggs?: boolean, noHighlight?: boolean, company?: Array<string>, companyPublicResponse?: Array<string>, companyReceivedMax?: string, companyReceivedMin?: string, companyResponse?: Array<string>, consumerConsentProvided?: Array<string>, consumerDisputed?: Array<string>, dateReceivedMax?: string, dateReceivedMin?: string, hasNarrative?: Array<string>, issue?: Array<string>, product?: Array<string>, state?: Array<string>, submittedVia?: Array<string>, tag?: Array<string>, options?: any) {
        return ComplaintsApiFp(this.configuration).rootGet(searchTerm, field, frm, size, sort, format, noAggs, noHighlight, company, companyPublicResponse, companyReceivedMax, companyReceivedMin, companyResponse, consumerConsentProvided, consumerDisputed, dateReceivedMax, dateReceivedMin, hasNarrative, issue, product, state, submittedVia, tag, options)(this.axios, this.basePath);
    }

    public rootGetWithParam(params:GetParams) {
        const { searchTerm, field, frm, size, sort, format, noAggs, noHighlight, company, companyPublicResponse, companyReceivedMax, companyReceivedMin, companyResponse, consumerConsentProvided, consumerDisputed, dateReceivedMax, dateReceivedMin, hasNarrative, issue, product, state, submittedVia, tag, options } = params;
        return ComplaintsApiFp(this.configuration).rootGet(searchTerm, field, frm, size, sort, format, noAggs, noHighlight, company, companyPublicResponse, companyReceivedMax, companyReceivedMin, companyResponse, consumerConsentProvided, consumerDisputed, dateReceivedMax, dateReceivedMin, hasNarrative, issue, product, state, submittedVia, tag, options)(this.axios, this.basePath);
    }

    

}


/**
 * TypeaheadApi - axios parameter creator
 * @export
 */
export const TypeaheadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Provide a list of companies that match the input text
         * @summary Suggest possible companies
         * @param {string} text text to use for suggestions
         * @param {number} [size] Limit the size of the results
         * @param {Array<string>} [companyPublicResponse] Filter the results to only return these types of public response by the company
         * @param {string} [companyReceivedMax] Return results with date &lt; company_received_max (i.e. 2017-03-04)
         * @param {string} [companyReceivedMin] Return results with date &gt;&#x3D; company_received_min (i.e. 2017-03-04)
         * @param {Array<string>} [companyResponse] Filter the results to only return these types of response by the company
         * @param {Array<string>} [consumerConsentProvided] Filter the results to only return these types of consent consumer provided
         * @param {Array<string>} [consumerDisputed] Filter the results to only return the specified state of consumer disputed, i.e. yes, no
         * @param {string} [dateReceivedMax] Return results with date &lt; date_received_max (i.e. 2017-03-04)
         * @param {string} [dateReceivedMin] Return results with date &gt;&#x3D; date_received_min (i.e. 2017-03-04)
         * @param {Array<string>} [hasNarrative] Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no
         * @param {Array<string>} [issue] Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by \&#39;•\&#39;, Getting a Loan•Can\&#39;t qualify for a loan
         * @param {Array<string>} [product] Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by \&#39;•\&#39;, Mortgage•FHA mortgage
         * @param {Array<string>} [state] Filter the results to only return these states (use abbreviation, i.e. CA, VA)
         * @param {Array<string>} [submittedVia] Filter the results to only return these types of way consumers submitted their complaints
         * @param {Array<string>} [tag] Filter the results to only return these types of tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suggestCompanyGet(text: string, size?: number, companyPublicResponse?: Array<string>, companyReceivedMax?: string, companyReceivedMin?: string, companyResponse?: Array<string>, consumerConsentProvided?: Array<string>, consumerDisputed?: Array<string>, dateReceivedMax?: string, dateReceivedMin?: string, hasNarrative?: Array<string>, issue?: Array<string>, product?: Array<string>, state?: Array<string>, submittedVia?: Array<string>, tag?: Array<string>, options: any = {}): RequestArgs {
            // verify required parameter 'text' is not null or undefined
            if (text === null || text === undefined) {
                throw new RequiredError('text','Required parameter text was null or undefined when calling suggestCompanyGet.');
            }
            const localVarPath = `/_suggest_company`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (companyPublicResponse) {
                localVarQueryParameter['company_public_response'] = companyPublicResponse;
            }

            if (companyReceivedMax !== undefined) {
                localVarQueryParameter['company_received_max'] = (companyReceivedMax as any instanceof Date) ?
                    (companyReceivedMax as any).toISOString().substr(0,10) :
                    companyReceivedMax;
            }

            if (companyReceivedMin !== undefined) {
                localVarQueryParameter['company_received_min'] = (companyReceivedMin as any instanceof Date) ?
                    (companyReceivedMin as any).toISOString().substr(0,10) :
                    companyReceivedMin;
            }

            if (companyResponse) {
                localVarQueryParameter['company_response'] = companyResponse;
            }

            if (consumerConsentProvided) {
                localVarQueryParameter['consumer_consent_provided'] = consumerConsentProvided;
            }

            if (consumerDisputed) {
                localVarQueryParameter['consumer_disputed'] = consumerDisputed;
            }

            if (dateReceivedMax !== undefined) {
                localVarQueryParameter['date_received_max'] = (dateReceivedMax as any instanceof Date) ?
                    (dateReceivedMax as any).toISOString().substr(0,10) :
                    dateReceivedMax;
            }

            if (dateReceivedMin !== undefined) {
                localVarQueryParameter['date_received_min'] = (dateReceivedMin as any instanceof Date) ?
                    (dateReceivedMin as any).toISOString().substr(0,10) :
                    dateReceivedMin;
            }

            if (hasNarrative) {
                localVarQueryParameter['has_narrative'] = hasNarrative;
            }

            if (issue) {
                localVarQueryParameter['issue'] = issue;
            }

            if (product) {
                localVarQueryParameter['product'] = product;
            }

            if (state) {
                localVarQueryParameter['state'] = state;
            }

            if (submittedVia) {
                localVarQueryParameter['submitted_via'] = submittedVia;
            }

            if (tag) {
                localVarQueryParameter['tag'] = tag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The endpoint for the main search box in the UI
         * @summary Suggest possible searches
         * @param {string} text text to use for suggestions
         * @param {number} [size] Limit the size of the results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suggestGet(text: string, size?: number, options: any = {}): RequestArgs {
            // verify required parameter 'text' is not null or undefined
            if (text === null || text === undefined) {
                throw new RequiredError('text','Required parameter text was null or undefined when calling suggestGet.');
            }
            const localVarPath = `/_suggest`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provide a list of zip codes that match the input text
         * @summary Suggest possible zip codes
         * @param {string} text text to use for suggestions
         * @param {number} [size] Limit the size of the results
         * @param {Array<string>} [companyPublicResponse] Filter the results to only return these types of public response by the company
         * @param {string} [companyReceivedMax] Return results with date &lt; company_received_max (i.e. 2017-03-04)
         * @param {string} [companyReceivedMin] Return results with date &gt;&#x3D; company_received_min (i.e. 2017-03-04)
         * @param {Array<string>} [companyResponse] Filter the results to only return these types of response by the company
         * @param {Array<string>} [consumerConsentProvided] Filter the results to only return these types of consent consumer provided
         * @param {Array<string>} [consumerDisputed] Filter the results to only return the specified state of consumer disputed, i.e. yes, no
         * @param {string} [dateReceivedMax] Return results with date &lt; date_received_max (i.e. 2017-03-04)
         * @param {string} [dateReceivedMin] Return results with date &gt;&#x3D; date_received_min (i.e. 2017-03-04)
         * @param {Array<string>} [hasNarrative] Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no
         * @param {Array<string>} [issue] Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by \&#39;•\&#39;, Getting a Loan•Can\&#39;t qualify for a loan
         * @param {Array<string>} [product] Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by \&#39;•\&#39;, Mortgage•FHA mortgage
         * @param {Array<string>} [state] Filter the results to only return these states (use abbreviation, i.e. CA, VA)
         * @param {Array<string>} [submittedVia] Filter the results to only return these types of way consumers submitted their complaints
         * @param {Array<string>} [tag] Filter the results to only return these types of tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suggestZipGet(text: string, size?: number, companyPublicResponse?: Array<string>, companyReceivedMax?: string, companyReceivedMin?: string, companyResponse?: Array<string>, consumerConsentProvided?: Array<string>, consumerDisputed?: Array<string>, dateReceivedMax?: string, dateReceivedMin?: string, hasNarrative?: Array<string>, issue?: Array<string>, product?: Array<string>, state?: Array<string>, submittedVia?: Array<string>, tag?: Array<string>, options: any = {}): RequestArgs {
            // verify required parameter 'text' is not null or undefined
            if (text === null || text === undefined) {
                throw new RequiredError('text','Required parameter text was null or undefined when calling suggestZipGet.');
            }
            const localVarPath = `/_suggest_zip`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (companyPublicResponse) {
                localVarQueryParameter['company_public_response'] = companyPublicResponse;
            }

            if (companyReceivedMax !== undefined) {
                localVarQueryParameter['company_received_max'] = (companyReceivedMax as any instanceof Date) ?
                    (companyReceivedMax as any).toISOString().substr(0,10) :
                    companyReceivedMax;
            }

            if (companyReceivedMin !== undefined) {
                localVarQueryParameter['company_received_min'] = (companyReceivedMin as any instanceof Date) ?
                    (companyReceivedMin as any).toISOString().substr(0,10) :
                    companyReceivedMin;
            }

            if (companyResponse) {
                localVarQueryParameter['company_response'] = companyResponse;
            }

            if (consumerConsentProvided) {
                localVarQueryParameter['consumer_consent_provided'] = consumerConsentProvided;
            }

            if (consumerDisputed) {
                localVarQueryParameter['consumer_disputed'] = consumerDisputed;
            }

            if (dateReceivedMax !== undefined) {
                localVarQueryParameter['date_received_max'] = (dateReceivedMax as any instanceof Date) ?
                    (dateReceivedMax as any).toISOString().substr(0,10) :
                    dateReceivedMax;
            }

            if (dateReceivedMin !== undefined) {
                localVarQueryParameter['date_received_min'] = (dateReceivedMin as any instanceof Date) ?
                    (dateReceivedMin as any).toISOString().substr(0,10) :
                    dateReceivedMin;
            }

            if (hasNarrative) {
                localVarQueryParameter['has_narrative'] = hasNarrative;
            }

            if (issue) {
                localVarQueryParameter['issue'] = issue;
            }

            if (product) {
                localVarQueryParameter['product'] = product;
            }

            if (state) {
                localVarQueryParameter['state'] = state;
            }

            if (submittedVia) {
                localVarQueryParameter['submitted_via'] = submittedVia;
            }

            if (tag) {
                localVarQueryParameter['tag'] = tag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TypeaheadApi - functional programming interface
 * @export
 */
export const TypeaheadApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Provide a list of companies that match the input text
         * @summary Suggest possible companies
         * @param {string} text text to use for suggestions
         * @param {number} [size] Limit the size of the results
         * @param {Array<string>} [companyPublicResponse] Filter the results to only return these types of public response by the company
         * @param {string} [companyReceivedMax] Return results with date &lt; company_received_max (i.e. 2017-03-04)
         * @param {string} [companyReceivedMin] Return results with date &gt;&#x3D; company_received_min (i.e. 2017-03-04)
         * @param {Array<string>} [companyResponse] Filter the results to only return these types of response by the company
         * @param {Array<string>} [consumerConsentProvided] Filter the results to only return these types of consent consumer provided
         * @param {Array<string>} [consumerDisputed] Filter the results to only return the specified state of consumer disputed, i.e. yes, no
         * @param {string} [dateReceivedMax] Return results with date &lt; date_received_max (i.e. 2017-03-04)
         * @param {string} [dateReceivedMin] Return results with date &gt;&#x3D; date_received_min (i.e. 2017-03-04)
         * @param {Array<string>} [hasNarrative] Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no
         * @param {Array<string>} [issue] Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by \&#39;•\&#39;, Getting a Loan•Can\&#39;t qualify for a loan
         * @param {Array<string>} [product] Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by \&#39;•\&#39;, Mortgage•FHA mortgage
         * @param {Array<string>} [state] Filter the results to only return these states (use abbreviation, i.e. CA, VA)
         * @param {Array<string>} [submittedVia] Filter the results to only return these types of way consumers submitted their complaints
         * @param {Array<string>} [tag] Filter the results to only return these types of tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suggestCompanyGet(text: string, size?: number, companyPublicResponse?: Array<string>, companyReceivedMax?: string, companyReceivedMin?: string, companyResponse?: Array<string>, consumerConsentProvided?: Array<string>, consumerDisputed?: Array<string>, dateReceivedMax?: string, dateReceivedMin?: string, hasNarrative?: Array<string>, issue?: Array<string>, product?: Array<string>, state?: Array<string>, submittedVia?: Array<string>, tag?: Array<string>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = TypeaheadApiAxiosParamCreator(configuration).suggestCompanyGet(text, size, companyPublicResponse, companyReceivedMax, companyReceivedMin, companyResponse, consumerConsentProvided, consumerDisputed, dateReceivedMax, dateReceivedMin, hasNarrative, issue, product, state, submittedVia, tag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * The endpoint for the main search box in the UI
         * @summary Suggest possible searches
         * @param {string} text text to use for suggestions
         * @param {number} [size] Limit the size of the results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suggestGet(text: string, size?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = TypeaheadApiAxiosParamCreator(configuration).suggestGet(text, size, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provide a list of zip codes that match the input text
         * @summary Suggest possible zip codes
         * @param {string} text text to use for suggestions
         * @param {number} [size] Limit the size of the results
         * @param {Array<string>} [companyPublicResponse] Filter the results to only return these types of public response by the company
         * @param {string} [companyReceivedMax] Return results with date &lt; company_received_max (i.e. 2017-03-04)
         * @param {string} [companyReceivedMin] Return results with date &gt;&#x3D; company_received_min (i.e. 2017-03-04)
         * @param {Array<string>} [companyResponse] Filter the results to only return these types of response by the company
         * @param {Array<string>} [consumerConsentProvided] Filter the results to only return these types of consent consumer provided
         * @param {Array<string>} [consumerDisputed] Filter the results to only return the specified state of consumer disputed, i.e. yes, no
         * @param {string} [dateReceivedMax] Return results with date &lt; date_received_max (i.e. 2017-03-04)
         * @param {string} [dateReceivedMin] Return results with date &gt;&#x3D; date_received_min (i.e. 2017-03-04)
         * @param {Array<string>} [hasNarrative] Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no
         * @param {Array<string>} [issue] Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by \&#39;•\&#39;, Getting a Loan•Can\&#39;t qualify for a loan
         * @param {Array<string>} [product] Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by \&#39;•\&#39;, Mortgage•FHA mortgage
         * @param {Array<string>} [state] Filter the results to only return these states (use abbreviation, i.e. CA, VA)
         * @param {Array<string>} [submittedVia] Filter the results to only return these types of way consumers submitted their complaints
         * @param {Array<string>} [tag] Filter the results to only return these types of tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suggestZipGet(text: string, size?: number, companyPublicResponse?: Array<string>, companyReceivedMax?: string, companyReceivedMin?: string, companyResponse?: Array<string>, consumerConsentProvided?: Array<string>, consumerDisputed?: Array<string>, dateReceivedMax?: string, dateReceivedMin?: string, hasNarrative?: Array<string>, issue?: Array<string>, product?: Array<string>, state?: Array<string>, submittedVia?: Array<string>, tag?: Array<string>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = TypeaheadApiAxiosParamCreator(configuration).suggestZipGet(text, size, companyPublicResponse, companyReceivedMax, companyReceivedMin, companyResponse, consumerConsentProvided, consumerDisputed, dateReceivedMax, dateReceivedMin, hasNarrative, issue, product, state, submittedVia, tag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TypeaheadApi - factory interface
 * @export
 */
export const TypeaheadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Provide a list of companies that match the input text
         * @summary Suggest possible companies
         * @param {string} text text to use for suggestions
         * @param {number} [size] Limit the size of the results
         * @param {Array<string>} [companyPublicResponse] Filter the results to only return these types of public response by the company
         * @param {string} [companyReceivedMax] Return results with date &lt; company_received_max (i.e. 2017-03-04)
         * @param {string} [companyReceivedMin] Return results with date &gt;&#x3D; company_received_min (i.e. 2017-03-04)
         * @param {Array<string>} [companyResponse] Filter the results to only return these types of response by the company
         * @param {Array<string>} [consumerConsentProvided] Filter the results to only return these types of consent consumer provided
         * @param {Array<string>} [consumerDisputed] Filter the results to only return the specified state of consumer disputed, i.e. yes, no
         * @param {string} [dateReceivedMax] Return results with date &lt; date_received_max (i.e. 2017-03-04)
         * @param {string} [dateReceivedMin] Return results with date &gt;&#x3D; date_received_min (i.e. 2017-03-04)
         * @param {Array<string>} [hasNarrative] Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no
         * @param {Array<string>} [issue] Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by \&#39;•\&#39;, Getting a Loan•Can\&#39;t qualify for a loan
         * @param {Array<string>} [product] Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by \&#39;•\&#39;, Mortgage•FHA mortgage
         * @param {Array<string>} [state] Filter the results to only return these states (use abbreviation, i.e. CA, VA)
         * @param {Array<string>} [submittedVia] Filter the results to only return these types of way consumers submitted their complaints
         * @param {Array<string>} [tag] Filter the results to only return these types of tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suggestCompanyGet(text: string, size?: number, companyPublicResponse?: Array<string>, companyReceivedMax?: string, companyReceivedMin?: string, companyResponse?: Array<string>, consumerConsentProvided?: Array<string>, consumerDisputed?: Array<string>, dateReceivedMax?: string, dateReceivedMin?: string, hasNarrative?: Array<string>, issue?: Array<string>, product?: Array<string>, state?: Array<string>, submittedVia?: Array<string>, tag?: Array<string>, options?: any) {
            return TypeaheadApiFp(configuration).suggestCompanyGet(text, size, companyPublicResponse, companyReceivedMax, companyReceivedMin, companyResponse, consumerConsentProvided, consumerDisputed, dateReceivedMax, dateReceivedMin, hasNarrative, issue, product, state, submittedVia, tag, options)(axios, basePath);
        },
        /**
         * The endpoint for the main search box in the UI
         * @summary Suggest possible searches
         * @param {string} text text to use for suggestions
         * @param {number} [size] Limit the size of the results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suggestGet(text: string, size?: number, options?: any) {
            return TypeaheadApiFp(configuration).suggestGet(text, size, options)(axios, basePath);
        },
        /**
         * Provide a list of zip codes that match the input text
         * @summary Suggest possible zip codes
         * @param {string} text text to use for suggestions
         * @param {number} [size] Limit the size of the results
         * @param {Array<string>} [companyPublicResponse] Filter the results to only return these types of public response by the company
         * @param {string} [companyReceivedMax] Return results with date &lt; company_received_max (i.e. 2017-03-04)
         * @param {string} [companyReceivedMin] Return results with date &gt;&#x3D; company_received_min (i.e. 2017-03-04)
         * @param {Array<string>} [companyResponse] Filter the results to only return these types of response by the company
         * @param {Array<string>} [consumerConsentProvided] Filter the results to only return these types of consent consumer provided
         * @param {Array<string>} [consumerDisputed] Filter the results to only return the specified state of consumer disputed, i.e. yes, no
         * @param {string} [dateReceivedMax] Return results with date &lt; date_received_max (i.e. 2017-03-04)
         * @param {string} [dateReceivedMin] Return results with date &gt;&#x3D; date_received_min (i.e. 2017-03-04)
         * @param {Array<string>} [hasNarrative] Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no
         * @param {Array<string>} [issue] Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by \&#39;•\&#39;, Getting a Loan•Can\&#39;t qualify for a loan
         * @param {Array<string>} [product] Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by \&#39;•\&#39;, Mortgage•FHA mortgage
         * @param {Array<string>} [state] Filter the results to only return these states (use abbreviation, i.e. CA, VA)
         * @param {Array<string>} [submittedVia] Filter the results to only return these types of way consumers submitted their complaints
         * @param {Array<string>} [tag] Filter the results to only return these types of tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        suggestZipGet(text: string, size?: number, companyPublicResponse?: Array<string>, companyReceivedMax?: string, companyReceivedMin?: string, companyResponse?: Array<string>, consumerConsentProvided?: Array<string>, consumerDisputed?: Array<string>, dateReceivedMax?: string, dateReceivedMin?: string, hasNarrative?: Array<string>, issue?: Array<string>, product?: Array<string>, state?: Array<string>, submittedVia?: Array<string>, tag?: Array<string>, options?: any) {
            return TypeaheadApiFp(configuration).suggestZipGet(text, size, companyPublicResponse, companyReceivedMax, companyReceivedMin, companyResponse, consumerConsentProvided, consumerDisputed, dateReceivedMax, dateReceivedMin, hasNarrative, issue, product, state, submittedVia, tag, options)(axios, basePath);
        },
    };
};

/**
 * TypeaheadApi - object-oriented interface
 * @export
 * @class TypeaheadApi
 * @extends {BaseAPI}
 */
export class TypeaheadApi extends BaseAPI {
    /**
     * Provide a list of companies that match the input text
     * @summary Suggest possible companies
     * @param {string} text text to use for suggestions
     * @param {number} [size] Limit the size of the results
     * @param {Array<string>} [companyPublicResponse] Filter the results to only return these types of public response by the company
     * @param {string} [companyReceivedMax] Return results with date &lt; company_received_max (i.e. 2017-03-04)
     * @param {string} [companyReceivedMin] Return results with date &gt;&#x3D; company_received_min (i.e. 2017-03-04)
     * @param {Array<string>} [companyResponse] Filter the results to only return these types of response by the company
     * @param {Array<string>} [consumerConsentProvided] Filter the results to only return these types of consent consumer provided
     * @param {Array<string>} [consumerDisputed] Filter the results to only return the specified state of consumer disputed, i.e. yes, no
     * @param {string} [dateReceivedMax] Return results with date &lt; date_received_max (i.e. 2017-03-04)
     * @param {string} [dateReceivedMin] Return results with date &gt;&#x3D; date_received_min (i.e. 2017-03-04)
     * @param {Array<string>} [hasNarrative] Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no
     * @param {Array<string>} [issue] Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by \&#39;•\&#39;, Getting a Loan•Can\&#39;t qualify for a loan
     * @param {Array<string>} [product] Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by \&#39;•\&#39;, Mortgage•FHA mortgage
     * @param {Array<string>} [state] Filter the results to only return these states (use abbreviation, i.e. CA, VA)
     * @param {Array<string>} [submittedVia] Filter the results to only return these types of way consumers submitted their complaints
     * @param {Array<string>} [tag] Filter the results to only return these types of tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypeaheadApi
     */
    public suggestCompanyGet(text: string, size?: number, companyPublicResponse?: Array<string>, companyReceivedMax?: string, companyReceivedMin?: string, companyResponse?: Array<string>, consumerConsentProvided?: Array<string>, consumerDisputed?: Array<string>, dateReceivedMax?: string, dateReceivedMin?: string, hasNarrative?: Array<string>, issue?: Array<string>, product?: Array<string>, state?: Array<string>, submittedVia?: Array<string>, tag?: Array<string>, options?: any) {
        return TypeaheadApiFp(this.configuration).suggestCompanyGet(text, size, companyPublicResponse, companyReceivedMax, companyReceivedMin, companyResponse, consumerConsentProvided, consumerDisputed, dateReceivedMax, dateReceivedMin, hasNarrative, issue, product, state, submittedVia, tag, options)(this.axios, this.basePath);
    }

    /**
     * The endpoint for the main search box in the UI
     * @summary Suggest possible searches
     * @param {string} text text to use for suggestions
     * @param {number} [size] Limit the size of the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypeaheadApi
     */
    public suggestGet(text: string, size?: number, options?: any) {
        return TypeaheadApiFp(this.configuration).suggestGet(text, size, options)(this.axios, this.basePath);
    }

    /**
     * Provide a list of zip codes that match the input text
     * @summary Suggest possible zip codes
     * @param {string} text text to use for suggestions
     * @param {number} [size] Limit the size of the results
     * @param {Array<string>} [companyPublicResponse] Filter the results to only return these types of public response by the company
     * @param {string} [companyReceivedMax] Return results with date &lt; company_received_max (i.e. 2017-03-04)
     * @param {string} [companyReceivedMin] Return results with date &gt;&#x3D; company_received_min (i.e. 2017-03-04)
     * @param {Array<string>} [companyResponse] Filter the results to only return these types of response by the company
     * @param {Array<string>} [consumerConsentProvided] Filter the results to only return these types of consent consumer provided
     * @param {Array<string>} [consumerDisputed] Filter the results to only return the specified state of consumer disputed, i.e. yes, no
     * @param {string} [dateReceivedMax] Return results with date &lt; date_received_max (i.e. 2017-03-04)
     * @param {string} [dateReceivedMin] Return results with date &gt;&#x3D; date_received_min (i.e. 2017-03-04)
     * @param {Array<string>} [hasNarrative] Filter the results to only return the specified state of whether it has narrative in the complaint or not, i.e. yes, no
     * @param {Array<string>} [issue] Filter the results to only return these types of issue and subissue, i.e. product-only: Getting a Loan, subproduct needs to include product, separated by \&#39;•\&#39;, Getting a Loan•Can\&#39;t qualify for a loan
     * @param {Array<string>} [product] Filter the results to only return these types of product and subproduct, i.e. product-only: Mortgage, subproduct needs to include product, separated by \&#39;•\&#39;, Mortgage•FHA mortgage
     * @param {Array<string>} [state] Filter the results to only return these states (use abbreviation, i.e. CA, VA)
     * @param {Array<string>} [submittedVia] Filter the results to only return these types of way consumers submitted their complaints
     * @param {Array<string>} [tag] Filter the results to only return these types of tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypeaheadApi
     */
    public suggestZipGet(text: string, size?: number, companyPublicResponse?: Array<string>, companyReceivedMax?: string, companyReceivedMin?: string, companyResponse?: Array<string>, consumerConsentProvided?: Array<string>, consumerDisputed?: Array<string>, dateReceivedMax?: string, dateReceivedMin?: string, hasNarrative?: Array<string>, issue?: Array<string>, product?: Array<string>, state?: Array<string>, submittedVia?: Array<string>, tag?: Array<string>, options?: any) {
        return TypeaheadApiFp(this.configuration).suggestZipGet(text, size, companyPublicResponse, companyReceivedMax, companyReceivedMin, companyResponse, consumerConsentProvided, consumerDisputed, dateReceivedMax, dateReceivedMin, hasNarrative, issue, product, state, submittedVia, tag, options)(this.axios, this.basePath);
    }

}


